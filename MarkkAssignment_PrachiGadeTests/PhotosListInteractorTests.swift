//
//  PhotosListInteractorTests.swift
//  MarkkAssignment_PrachiGade
//
//  Created by Prachi Gade on 06/11/20.
//  Copyright (c) 2020 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import MarkkAssignment_PrachiGade
import XCTest

class PhotosListInteractorTests: XCTestCase
{
    // MARK: Subject under test
    
    var sut: PhotosListInteractor!
    
    // MARK: Test lifecycle
    
    override func setUp() {
        super.setUp()
        setupPhotosListInteractor()
    }
    
    override func tearDown() {
        super.tearDown()
    }
    
    // MARK: Test setup
    
    func setupPhotosListInteractor() {
        sut = PhotosListInteractor()
    }
    
    // MARK: Test doubles
    
    class PhotosListPresentationLogicSpy: PhotosListPresentationLogic {
        
        var presentPhotosCalled = false
        
        func presentPhotos(response: PhotosList.UploadPhotos.Response) {
            presentPhotosCalled = true
        }
        
        func presentError(errorMsg: String) {
            
        }
    }
    class PhotosListWorkerSpy: PhotosListWorker {
        var uploadPhotosCalled = false
        // MARK: Spied methods
        
        /// test of upload photos after view loads are presented
        ///
        /// - Parameters:
        ///   - request: upload photo request
        ///   - onCompletion: completion handler to present uploaded photos
        
        override func uploadPhotos(request: UploadPhotosRequest, onCompletion: @escaping (Bool, UploadPhotosResponse?) -> ()) {
            uploadPhotosCalled = true
        }
    }
    
    // MARK: Tests
    func testUploadPhotosShouldAskPhotosWorkerToUploadPhotosAndPresentResult() {
        
        // Given
        let listPhotosPresentationLogicSpy = PhotosListPresentationLogicSpy()
        sut.presenter = listPhotosPresentationLogicSpy
        
        let photosWorkerSpy = PhotosListWorkerSpy()
        sut.worker = photosWorkerSpy
        
        // When
        let request = PhotosList.UploadPhotos.Request(info: UploadPhotosRequest(image: UIImage()))
        sut.getImagesAndUpload(request: request)
        
        //Then
        XCTAssert(photosWorkerSpy.uploadPhotosCalled, "upload photos should upload photos and present result")
    }
}
