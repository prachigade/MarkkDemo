//
//  PhotosListViewController.swift
//  MarkkAssignment_PrachiGade
//
//  Created by Prachi Gade on 31/10/20.
//  Copyright (c) 2020 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import Floaty
import BSImagePicker
import Photos

protocol PhotosListDisplayLogic: class {
    func displayPhotos(viewModel: PhotosList.UploadPhotos.ViewModel)
    func displayErrorMessage(errorMsg: String)
}

class PhotosListViewController: UIViewController, PhotosListDisplayLogic, UIGestureRecognizerDelegate {
    
    //MARK: IBOutlets
    @IBOutlet weak var imageListBackgroundView: UIView!
    @IBOutlet weak var photosListCollectionView: UICollectionView!
    @IBOutlet weak var progressView: UIView!
    @IBOutlet weak var progressLbl: UILabel!
    @IBOutlet weak var progressImgView: UIImageView!
    
    //MARK: Clean Swift setup variables
    var interactor: PhotosListBusinessLogic?
    var router: (NSObjectProtocol & PhotosListRoutingLogic & PhotosListDataPassing)?
    
    var photos: [UIImage] = []
    var imagesToUpload: [Image] = []
    
    //MARK: Photos variables
    let manager = PHImageManager.default()
    let option = PHImageRequestOptions()
    var thumbnail = UIImage()
     
    // MARK: Object lifecycle
        override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    private func setup() {
        let viewController = self
        let interactor = PhotosListInteractor()
        let presenter = PhotosListPresenter()
        let router = PhotosListRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        self.setupUI()
    }
    
    override func viewDidAppear(_ animated: Bool) {
        super.viewDidAppear(animated)
        photosListCollectionView.reloadData()
    }
    
    func displayPhotos(viewModel: PhotosList.UploadPhotos.ViewModel) {
        if let image = viewModel.info.photos.image {
            self.photos.append(image)
            self.progressImgView.image = nil
            self.progressView.isHidden = true
            
            if photos.count != 0 {
                self.imageListBackgroundView.isHidden = true
                self.photosListCollectionView.isHidden = false
                photosListCollectionView.reloadData()
            } else {
                self.imageListBackgroundView.isHidden = false
                self.photosListCollectionView.isHidden = true
            }
        }
    }
    
    func displayErrorMessage(errorMsg: String) {
        let alert = UIAlertController(title: "Alert", message: errorMsg, preferredStyle: UIAlertController.Style.alert)
        alert.addAction(UIAlertAction(title: "Ok", style: UIAlertAction.Style.default, handler: nil))
        self.present(alert, animated: true, completion: nil)
    }
}

//MARK: UI Handling methods
extension PhotosListViewController {
    
    private func setupGesture() {
        let tapGesture = UITapGestureRecognizer(target: self, action: #selector(progressViewTapped(_:)))
        tapGesture.delegate = self
        progressView.addGestureRecognizer(tapGesture)
    }
    
    private func setupFloatingButton() {
        let floaty = Floaty()
        floaty.buttonColor = .black
        floaty.plusColor = .white
        floaty.addItem("Open Image Gallery", icon: UIImage(named: "photosPlaceholder")) { (item) in
            self.openImageGallery()
        }
        self.view.addSubview(floaty)
    }
    
    private func setupCollectionView() {
        option.isSynchronous = true

        photosListCollectionView.register(UINib(nibName: "PhotoListCollectionViewCell", bundle: .main), forCellWithReuseIdentifier: "PhotoListCollectionViewCell")
        photosListCollectionView.dataSource = self
        photosListCollectionView.delegate = self
        photosListCollectionView.isHidden = true
        
        if let layout = photosListCollectionView?.collectionViewLayout as? PinterestLayout {
            layout.delegate = self
        }
    }
    
    private func setupInitialUI() {
        self.imageListBackgroundView.layer.cornerRadius = 5.0
        self.imageListBackgroundView.backgroundColor = CustomColor.backgroundGray()
        progressView.isHidden = true
    }
    private func setupUI() {
        setupGesture()
        setupFloatingButton()
        setupCollectionView()
        setupInitialUI()
    }
    
    @objc func progressViewTapped(_ sender: UITapGestureRecognizer) {
        let uploadProgressVC = UIStoryboard(name: "Main", bundle: .main).instantiateViewController(withIdentifier: "UploadProgressViewController") as! UploadProgressViewController
        uploadProgressVC.imagesToUpload = self.photos
        let navigationVC = UINavigationController(rootViewController: uploadProgressVC)
        self.present(navigationVC, animated: true) {
            print("vc presented")
        }
    }
    
    @objc func openImageGallery() {
        
        let pickerController = ImagePickerController()
        
        presentImagePicker(pickerController, select: { (asset) in
        }, deselect: { (asset) in
        }, cancel: { (assets) in
        }, finish: { (assets) in
            
            for asset in assets {
                self.processAssetForUpload(asset: asset)
            }
        })
    }
    
    func processAssetForUpload(asset: PHAsset) {
        self.progressView.isHidden = false
        self.manager.requestImage(for: asset, targetSize: CGSize(width: 100.0, height: 100.0), contentMode: .aspectFit, options: self.option, resultHandler: {(result, info)->Void in
            if let result = result {
                self.progressImgView.image = result
                DispatchQueue.main.asyncAfter(deadline: .now() + 2.0) {
                    let request = UploadPhotosRequest(image: result)
                    self.interactor?.getImagesAndUpload(request: PhotosList.UploadPhotos.Request(info: request))
                }
            }
        })
    }
}

extension PhotosListViewController: UICollectionViewDataSource, UICollectionViewDelegate {
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        self.photos.count
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: "PhotoListCollectionViewCell", for: indexPath) as! PhotoListCollectionViewCell
        cell.imgView.image = photos[indexPath.row]
        return cell
    }

    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, minimumInteritemSpacingForSectionAt section: Int) -> CGFloat {
        return 5
    }
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, minimumLineSpacingForSectionAt section: Int) -> CGFloat {
        return 5
    }
    
}

extension PhotosListViewController: PinterestLayoutDelegate {
    func collectionView(_ collectionView: UICollectionView, heightForPhotoAtIndexPath indexPath: IndexPath) -> CGFloat {
        
        var height: CGFloat = self.photosListCollectionView.frame.width/2
        let width: CGFloat = self.photosListCollectionView.frame.width/2
        
        let photo = photos[indexPath.row]
        
        let imgHeight = photo.size.height
        let imgWidth = photo.size.width
        
        let orgheight = imgHeight
        let orgwidth = imgWidth
        
        height = (width/orgwidth) * orgheight
        return height
    }
}
