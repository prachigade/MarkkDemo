//
//  UploadProgressViewController.swift
//  MarkkAssignment_PrachiGade
//
//  Created by Prachi Gade on 02/11/20.
//  Copyright (c) 2020 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol PendingUploadsDelegate: class {
    func showPendingUploads(images: [UIImage])
}
protocol UploadProgressDisplayLogic: class {
    func displaySomething(viewModel: UploadProgress.Something.ViewModel)
}

class UploadProgressViewController: UIViewController, UploadProgressDisplayLogic {
    @IBOutlet weak var collectionView: UICollectionView!
    var images: [Image] = []
    var imagesToUpload: [UIImage] = []
    var interactor: UploadProgressBusinessLogic?
    var router: (NSObjectProtocol & UploadProgressRoutingLogic & UploadProgressDataPassing)?
    weak var delegate: PendingUploadsDelegate?
    
    // MARK: Object lifecycle
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
        setupNavigation()
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = UploadProgressInteractor()
        let presenter = UploadProgressPresenter()
        let router = UploadProgressRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    private func setupNavigation() {
        let doneBtn = UIBarButtonItem(barButtonSystemItem: .done, target: self, action: #selector(doneTapped))
        self.navigationItem.rightBarButtonItem = doneBtn
    }
    
    private func setupUI() {
        collectionView.register(UINib(nibName: "PhotoListCollectionViewCell", bundle: .main), forCellWithReuseIdentifier: "PhotoListCollectionViewCell")
        collectionView.dataSource = self
        collectionView.delegate = self
        collectionView.reloadData()
    }
    
    @objc func doneTapped() {
        self.dismiss(animated: true) {
            print("vc dismissed")
        }
    }
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        doSomething()
        setupUI()
    }
    
    
    // MARK: Do something
    
    //@IBOutlet weak var nameTextField: UITextField!
    
    func doSomething() {
        let request = UploadProgress.Something.Request()
        interactor?.doSomething(request: request)
    }
    
    func displaySomething(viewModel: UploadProgress.Something.ViewModel) {
        //nameTextField.text = viewModel.name
    }
}

extension UploadProgressViewController: UICollectionViewDataSource, UICollectionViewDelegate {
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        self.imagesToUpload.count
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: "PhotoListCollectionViewCell", for: indexPath) as! PhotoListCollectionViewCell
        
        cell.imgView.image = imagesToUpload[indexPath.row]
        return cell
    }
}
